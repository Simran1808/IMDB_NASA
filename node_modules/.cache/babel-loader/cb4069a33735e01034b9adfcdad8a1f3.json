{"ast":null,"code":"var _jsxFileName = \"/Users/gurjotahuja/React Nasa IMDB/src/Components/Movies/AvailableMovies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport classes from './AvailableMovies.module.css';\nimport MovieCard from './MovieCard';\nimport NoImage from '/Users/gurjotahuja/React Nasa IMDB/src/assets/gallery.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AvailableMovies() {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [httpError, setHttpError] = useState();\n  useEffect(() => {\n    // console.log(movies);\n    const fetchData = async () => {\n      const response = await fetch(\"https://api.themoviedb.org/3/search/movie?api_key=48b43c71c226d58239efb833d05ab17c&language=en-US&query=NASA&include_adult=false&1\"); //Check if the fetch request was successful or not \n\n      if (!response.ok) {\n        throw new Error('Something went wrong.');\n      }\n\n      const responseData = await response.json();\n      const moviesData = responseData.results;\n      const loadedMovies = [];\n      console.log(moviesData);\n\n      for (const key in moviesData) {\n        //Adding the fetched data to the loadedMovies Array\n        const movieImage = moviesData[key].poster_path;\n        const fetchedMovieURL = movieImage != null ? `https://image.tmdb.org/t/p/original//${movieImage}` : NoImage;\n        loadedMovies.push({\n          id: key,\n          movieImageURL: fetchedMovieURL,\n          title: moviesData[key].original_title,\n          description: moviesData[key].overview,\n          popularity: moviesData[key].popularity,\n          releaseDate: moviesData[key].release_date\n        });\n      } //   console.log(loadedMovies);\n\n\n      setMovies(loadedMovies);\n    };\n\n    fetchData().catch(error => {\n      setHttpError(error.message);\n    });\n  }, []);\n  console.log(movies); //Check if there is an http error\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.ErrorMessage,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  const moviesList = movies.map(movie =>\n  /*#__PURE__*/\n  //Map each movie object to a JSX element\n  _jsxDEV(MovieCard, {\n    id: movie.id,\n    title: movie.title,\n    description: movie.description,\n    movieImageURL: movie.movieImageURL,\n    popularity: movie.popularity,\n    releaseDate: movie.releaseDate\n  }, movie.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this));\n  console.log(moviesList);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.movies,\n    children: moviesList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 8\n  }, this);\n}\n\n_s(AvailableMovies, \"SOOQllp+dzlNDGSKfaT4g2TkaOA=\");\n\n_c = AvailableMovies;\n;\nexport default AvailableMovies;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMovies\");","map":{"version":3,"names":["React","useEffect","useState","classes","MovieCard","NoImage","AvailableMovies","movies","setMovies","httpError","setHttpError","fetchData","response","fetch","ok","Error","responseData","json","moviesData","results","loadedMovies","console","log","key","movieImage","poster_path","fetchedMovieURL","push","id","movieImageURL","title","original_title","description","overview","popularity","releaseDate","release_date","catch","error","message","ErrorMessage","moviesList","map","movie"],"sources":["/Users/gurjotahuja/React Nasa IMDB/src/Components/Movies/AvailableMovies.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classes from './AvailableMovies.module.css';\nimport MovieCard from './MovieCard';\nimport NoImage from '/Users/gurjotahuja/React Nasa IMDB/src/assets/gallery.png';\n\nfunction AvailableMovies(){\nconst [movies, setMovies] = useState([]);\nconst [httpError, setHttpError] = useState();\n\nuseEffect(() => {\n    // console.log(movies);\n    const fetchData = async () => {\n        const response = await fetch(\"https://api.themoviedb.org/3/search/movie?api_key=48b43c71c226d58239efb833d05ab17c&language=en-US&query=NASA&include_adult=false&1\");\n\n        //Check if the fetch request was successful or not \n        if(!response.ok){\n            throw new Error('Something went wrong.'); \n        }\n        const responseData = await response.json();\n\n        const moviesData = responseData.results;\n        const loadedMovies = [];\n        console.log(moviesData);\n\n      for(const key in moviesData){ //Adding the fetched data to the loadedMovies Array\n        const movieImage = moviesData[key].poster_path;\n        \n        const fetchedMovieURL = (movieImage != null) ? `https://image.tmdb.org/t/p/original//${movieImage}` : NoImage;   \n        loadedMovies.push({\n          id: key,\n          movieImageURL: fetchedMovieURL,\n          title: moviesData[key].original_title,\n          description: moviesData[key].overview,\n          popularity: moviesData[key].popularity,\n          releaseDate: moviesData[key].release_date,\n        });\n      }\n    //   console.log(loadedMovies);\n      setMovies(loadedMovies); \n      \n            };\n\n    fetchData().catch( error => {\n        setHttpError(error.message);\n    });\n\n}, []);\n\nconsole.log(movies);\n\n//Check if there is an http error\nif(httpError){\n    return(\n      <section className={classes.ErrorMessage}>\n        <p>{httpError}</p>\n      </section>\n    )\n  }\n    const moviesList= movies.map(movie =>  //Map each movie object to a JSX element\n    <MovieCard\n    key= {movie.id}\n    id = {movie.id}\n    title = {movie.title}\n    description = {movie.description}\n    movieImageURL = {movie.movieImageURL}\n    popularity = {movie.popularity}\n    releaseDate = {movie.releaseDate}\n    />);\n\nconsole.log(moviesList);\n\nreturn <section className={classes.movies}>\n    \n    {/* <div className={classes.list}> */}\n    {moviesList}\n    {/* </div> */}\n    \n</section>\n};\n \n\nexport default AvailableMovies;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,2DAApB;;;AAEA,SAASC,eAAT,GAA0B;EAAA;;EAC1B,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,EAA1C;EAEAD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,SAAS,GAAG,YAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oIAAD,CAA5B,CAD0B,CAG1B;;MACA,IAAG,CAACD,QAAQ,CAACE,EAAb,EAAgB;QACZ,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;MACH;;MACD,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;MAEA,MAAMC,UAAU,GAAGF,YAAY,CAACG,OAAhC;MACA,MAAMC,YAAY,GAAG,EAArB;MACAC,OAAO,CAACC,GAAR,CAAYJ,UAAZ;;MAEF,KAAI,MAAMK,GAAV,IAAiBL,UAAjB,EAA4B;QAAE;QAC5B,MAAMM,UAAU,GAAGN,UAAU,CAACK,GAAD,CAAV,CAAgBE,WAAnC;QAEA,MAAMC,eAAe,GAAIF,UAAU,IAAI,IAAf,GAAwB,wCAAuCA,UAAW,EAA1E,GAA8EnB,OAAtG;QACAe,YAAY,CAACO,IAAb,CAAkB;UAChBC,EAAE,EAAEL,GADY;UAEhBM,aAAa,EAAEH,eAFC;UAGhBI,KAAK,EAAEZ,UAAU,CAACK,GAAD,CAAV,CAAgBQ,cAHP;UAIhBC,WAAW,EAAEd,UAAU,CAACK,GAAD,CAAV,CAAgBU,QAJb;UAKhBC,UAAU,EAAEhB,UAAU,CAACK,GAAD,CAAV,CAAgBW,UALZ;UAMhBC,WAAW,EAAEjB,UAAU,CAACK,GAAD,CAAV,CAAgBa;QANb,CAAlB;MAQD,CAzB2B,CA0B9B;;;MACE5B,SAAS,CAACY,YAAD,CAAT;IAEO,CA7BT;;IA+BAT,SAAS,GAAG0B,KAAZ,CAAmBC,KAAK,IAAI;MACxB5B,YAAY,CAAC4B,KAAK,CAACC,OAAP,CAAZ;IACH,CAFD;EAIH,CArCQ,EAqCN,EArCM,CAAT;EAuCAlB,OAAO,CAACC,GAAR,CAAYf,MAAZ,EA3C0B,CA6C1B;;EACA,IAAGE,SAAH,EAAa;IACT,oBACE;MAAS,SAAS,EAAEN,OAAO,CAACqC,YAA5B;MAAA,uBACE;QAAA,UAAI/B;MAAJ;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAKD;;EACC,MAAMgC,UAAU,GAAElC,MAAM,CAACmC,GAAP,CAAWC,KAAK;EAAA;EAAK;EACvC,QAAC,SAAD;IAEA,EAAE,EAAIA,KAAK,CAACf,EAFZ;IAGA,KAAK,EAAIe,KAAK,CAACb,KAHf;IAIA,WAAW,EAAIa,KAAK,CAACX,WAJrB;IAKA,aAAa,EAAIW,KAAK,CAACd,aALvB;IAMA,UAAU,EAAIc,KAAK,CAACT,UANpB;IAOA,WAAW,EAAIS,KAAK,CAACR;EAPrB,GACMQ,KAAK,CAACf,EADZ;IAAA;IAAA;IAAA;EAAA,QADkB,CAAlB;EAWJP,OAAO,CAACC,GAAR,CAAYmB,UAAZ;EAEA,oBAAO;IAAS,SAAS,EAAEtC,OAAO,CAACI,MAA5B;IAAA,UAGFkC;EAHE;IAAA;IAAA;IAAA;EAAA,QAAP;AAOC;;GAzEQnC,e;;KAAAA,e;AAyER;AAGD,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}