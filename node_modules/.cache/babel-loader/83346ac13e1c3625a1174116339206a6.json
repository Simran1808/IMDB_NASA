{"ast":null,"code":"var _jsxFileName = \"/Users/gurjotahuja/React Nasa IMDB/src/Components/Movies/AvailableMovies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport classes from './AvailableMovies.module.css';\nimport MovieCard from './MovieCard';\nimport NoImage from '../../assets/gallery.png';\nimport MovieModal from '../UI/MovieModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AvailableMovies() {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [httpError, setHttpError] = useState();\n  const [openModal, setOpenModal] = useState(false);\n  const [movieIndex, setMovieIndex] = useState('');\n  useEffect(() => {\n    // console.log(movies);\n    const fetchData = async () => {\n      const response = await fetch(\"https://api.themoviedb.org/3/search/movie?api_key=48b43c71c226d58239efb833d05ab17c&language=en-US&query=NASA&include_adult=false&1\"); //Check if the fetch request was successful or not \n\n      if (!response.ok) {\n        throw new Error('Something went wrong.');\n      }\n\n      const responseData = await response.json();\n      const moviesData = responseData.results;\n      const loadedMovies = [];\n      console.log(moviesData);\n\n      for (const key in moviesData) {\n        //Adding the fetched data to the loadedMovies Array\n        const movieImage = moviesData[key].poster_path;\n        const fetchedMovieURL = movieImage != null ? `https://image.tmdb.org/t/p/original//${movieImage}` : NoImage;\n        loadedMovies.push({\n          key: key,\n          id: moviesData[key].id,\n          movieImageURL: fetchedMovieURL,\n          title: moviesData[key].original_title,\n          description: moviesData[key].overview,\n          popularity: moviesData[key].popularity,\n          releaseDate: moviesData[key].release_date,\n          voteAverage: moviesData[key].vote_average,\n          voteCount: moviesData[key].vote_count\n        });\n      } //   console.log(loadedMovies);\n\n\n      setMovies(loadedMovies);\n    };\n\n    fetchData().catch(error => {\n      setHttpError(error.message);\n    });\n  }, []);\n  console.log(movies); //Check if there is an http error\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.ErrorMessage,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n  const moviesList = movies.map(movie =>\n  /*#__PURE__*/\n  //Map each movie object to a JSX element\n  _jsxDEV(MovieCard, {\n    onOpenModal: () => openModalHandler(movie),\n    id: movie.id,\n    title: movie.title,\n    description: movie.description,\n    movieImageURL: movie.movieImageURL,\n    popularity: movie.popularity,\n    releaseDate: movie.releaseDate\n  }, movie.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 1\n  }, this));\n  console.log(moviesList);\n\n  function openModalHandler(movie) {\n    setOpenModal(true);\n    setMovieIndex(movie.key);\n    console.log(movieIndex);\n    document.body.style.overflow = 'hidden';\n  }\n\n  ;\n\n  function closeModalHandler() {\n    setOpenModal(false);\n    document.body.style.overflow = 'unset';\n  }\n\n  ;\n  const movieDetails = movies.map(movie =>\n  /*#__PURE__*/\n  //Movie details to be displayed in the modal\n  _jsxDEV(MovieModal, {\n    onClose: closeModalHandler,\n    id: movie.id,\n    title: movie.title,\n    description: movie.description,\n    movieImageURL: movie.movieImageURL,\n    popularity: movie.popularity,\n    releaseDate: movie.releaseDate,\n    voteAverage: movie.voteAverage,\n    voteCount: movie.voteCount\n  }, movie.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this));\n  console.log(movieDetails);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.movies,\n    children: [moviesList, openModal && movieDetails[movieIndex]]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 8\n  }, this);\n}\n\n_s(AvailableMovies, \"72/FUpDyiMujnJLGfphXM8X9Q+Y=\");\n\n_c = AvailableMovies;\n;\nexport default AvailableMovies;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMovies\");","map":{"version":3,"names":["React","useEffect","useState","classes","MovieCard","NoImage","MovieModal","AvailableMovies","movies","setMovies","httpError","setHttpError","openModal","setOpenModal","movieIndex","setMovieIndex","fetchData","response","fetch","ok","Error","responseData","json","moviesData","results","loadedMovies","console","log","key","movieImage","poster_path","fetchedMovieURL","push","id","movieImageURL","title","original_title","description","overview","popularity","releaseDate","release_date","voteAverage","vote_average","voteCount","vote_count","catch","error","message","ErrorMessage","moviesList","map","movie","openModalHandler","document","body","style","overflow","closeModalHandler","movieDetails"],"sources":["/Users/gurjotahuja/React Nasa IMDB/src/Components/Movies/AvailableMovies.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classes from './AvailableMovies.module.css';\nimport MovieCard from './MovieCard';\nimport NoImage from '../../assets/gallery.png';\nimport MovieModal from '../UI/MovieModal';\n\nfunction AvailableMovies(){\nconst [movies, setMovies] = useState([]);\nconst [httpError, setHttpError] = useState();\nconst [openModal, setOpenModal] = useState(false);\nconst [movieIndex, setMovieIndex] = useState('');\n\nuseEffect(() => {\n    // console.log(movies);\n    const fetchData = async () => {\n        const response = await fetch(\"https://api.themoviedb.org/3/search/movie?api_key=48b43c71c226d58239efb833d05ab17c&language=en-US&query=NASA&include_adult=false&1\");\n\n        //Check if the fetch request was successful or not \n        if(!response.ok){\n            throw new Error('Something went wrong.'); \n        }\n        const responseData = await response.json();\n\n        const moviesData = responseData.results;\n        const loadedMovies = [];\n        console.log(moviesData);\n\n      for(const key in moviesData){ //Adding the fetched data to the loadedMovies Array\n        const movieImage = moviesData[key].poster_path;\n        \n        const fetchedMovieURL = (movieImage != null) ? `https://image.tmdb.org/t/p/original//${movieImage}` : NoImage;   \n        loadedMovies.push({\n          key: key,\n          id: moviesData[key].id,\n          movieImageURL: fetchedMovieURL,\n          title: moviesData[key].original_title,\n          description: moviesData[key].overview,\n          popularity: moviesData[key].popularity,\n          releaseDate: moviesData[key].release_date,\n          voteAverage: moviesData[key].vote_average,\n          voteCount: moviesData[key].vote_count,\n        });\n      }\n    //   console.log(loadedMovies);\n      setMovies(loadedMovies); \n      \n            };\n\n    fetchData().catch( error => {\n        setHttpError(error.message);\n    });\n\n}, []);\n\nconsole.log(movies);\n\n//Check if there is an http error\nif(httpError){\n    return(\n      <section className={classes.ErrorMessage}>\n        <p>{httpError}</p>\n      </section>\n    )\n  }\n\n  \nconst moviesList= movies.map(movie =>  //Map each movie object to a JSX element\n<MovieCard onOpenModal={ () => openModalHandler(movie)}\nkey= {movie.key}\nid = {movie.id}\ntitle = {movie.title}\ndescription = {movie.description}\nmovieImageURL = {movie.movieImageURL}\npopularity = {movie.popularity}\nreleaseDate = {movie.releaseDate}\n/>);\n\nconsole.log(moviesList);\n\nfunction openModalHandler(movie){ \n    setOpenModal(true);\n    setMovieIndex(movie.key);\n    console.log(movieIndex);\n    document.body.style.overflow = 'hidden';\n  };\n\n  function closeModalHandler(){\n      setOpenModal(false);\n      document.body.style.overflow = 'unset';\n\n  };\n\n\n\nconst movieDetails= movies.map(movie =>  //Movie details to be displayed in the modal\n    <MovieModal onClose={closeModalHandler}\n    key= {movie.key}\n    id = {movie.id}\n    title = {movie.title}\n    description = {movie.description}\n    movieImageURL = {movie.movieImageURL}\n    popularity = {movie.popularity}\n    releaseDate = {movie.releaseDate}\n    voteAverage = {movie.voteAverage}\n    voteCount = {movie.voteCount}\n    />);\n\n\nconsole.log(movieDetails);\n\n\n\n\n\nreturn <section className={classes.movies}>\n    \n    {/* <div className={classes.list}> */}\n    {moviesList}\n    {openModal && movieDetails[movieIndex]}\n    {/* </div> */}\n    \n</section>\n};\n \n\nexport default AvailableMovies;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}