{"ast":null,"code":"var _jsxFileName = \"/Users/gurjotahuja/React Nasa IMDB/src/Components/Movies/AvailableMovies.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport classes from './AvailableMovies.module.css';\nimport Card from '../UI/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AvailableMovies() {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [httpError, setHttpError] = useState();\n  useEffect(() => {\n    console.log(movies);\n\n    const fetchData = async () => {\n      const response = await fetch(\"https://api.themoviedb.org/3/search/movie?api_key=48b43c71c226d58239efb833d05ab17c&language=en-US&query=NASA&include_adult=false&1\"); //Check if the fetch request was successful or not \n\n      if (!response.ok) {\n        throw new Error('Something went wrong.');\n      }\n\n      const responseData = await response.json();\n      console.log(responseData.results);\n      console.log(responseData[1].poster_path);\n      const loadedMovies = [];\n\n      for (const key in responseData) {\n        //Adding the fetched data to the loadedMovies Array\n        loadedMovies.push({\n          id: key,\n          movieImageURL: responseData[key].poster_path,\n          title: responseData[key].original_title,\n          description: responseData[key].overview,\n          popularity: responseData[key].popularity,\n          releaseDate: responseData[key].release_data\n        });\n      }\n\n      setMeals(loadedMovies);\n      console.log(movies);\n    };\n\n    fetchData().catch(error => {\n      setHttpError(error.message);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Card, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 8\n  }, this);\n}\n\n_s(AvailableMovies, \"SOOQllp+dzlNDGSKfaT4g2TkaOA=\");\n\n_c = AvailableMovies;\n;\nexport default AvailableMovies;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMovies\");","map":{"version":3,"names":["React","useEffect","useState","classes","Card","AvailableMovies","movies","setMovies","httpError","setHttpError","console","log","fetchData","response","fetch","ok","Error","responseData","json","results","poster_path","loadedMovies","key","push","id","movieImageURL","title","original_title","description","overview","popularity","releaseDate","release_data","setMeals","catch","error","message"],"sources":["/Users/gurjotahuja/React Nasa IMDB/src/Components/Movies/AvailableMovies.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classes from './AvailableMovies.module.css';\nimport Card from '../UI/Card';\n\nfunction AvailableMovies(){\nconst [movies, setMovies] = useState([]);\nconst [httpError, setHttpError] = useState();\n\nuseEffect(() => {\n    console.log(movies);\n    const fetchData = async () => {\n        const response = await fetch(\"https://api.themoviedb.org/3/search/movie?api_key=48b43c71c226d58239efb833d05ab17c&language=en-US&query=NASA&include_adult=false&1\");\n\n        //Check if the fetch request was successful or not \n        if(!response.ok){\n            throw new Error('Something went wrong.'); \n        }\n        const responseData = await response.json();\n        console.log(responseData.results);\n        console.log(responseData[1].poster_path);\n        const loadedMovies = [];\n\n      for(const key in responseData){ //Adding the fetched data to the loadedMovies Array\n        loadedMovies.push({\n          id: key,\n          movieImageURL: responseData[key].poster_path,\n          title: responseData[key].original_title,\n          description: responseData[key].overview,\n          popularity: responseData[key].popularity,\n          releaseDate: responseData[key].release_data,\n        });\n      }\n\n      setMeals(loadedMovies); \n      console.log(movies);\n            };\n\n    fetchData().catch( error => {\n        setHttpError(error.message);\n    });\n\n}, []);\n\nreturn <Card>\n\n </Card>\n};\n \n\nexport default AvailableMovies;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;;AAEA,SAASC,eAAT,GAA0B;EAAA;;EAC1B,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,EAA1C;EAEAD,SAAS,CAAC,MAAM;IACZS,OAAO,CAACC,GAAR,CAAYL,MAAZ;;IACA,MAAMM,SAAS,GAAG,YAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oIAAD,CAA5B,CAD0B,CAG1B;;MACA,IAAG,CAACD,QAAQ,CAACE,EAAb,EAAgB;QACZ,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;MACH;;MACD,MAAMC,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA3B;MACAR,OAAO,CAACC,GAAR,CAAYM,YAAY,CAACE,OAAzB;MACAT,OAAO,CAACC,GAAR,CAAYM,YAAY,CAAC,CAAD,CAAZ,CAAgBG,WAA5B;MACA,MAAMC,YAAY,GAAG,EAArB;;MAEF,KAAI,MAAMC,GAAV,IAAiBL,YAAjB,EAA8B;QAAE;QAC9BI,YAAY,CAACE,IAAb,CAAkB;UAChBC,EAAE,EAAEF,GADY;UAEhBG,aAAa,EAAER,YAAY,CAACK,GAAD,CAAZ,CAAkBF,WAFjB;UAGhBM,KAAK,EAAET,YAAY,CAACK,GAAD,CAAZ,CAAkBK,cAHT;UAIhBC,WAAW,EAAEX,YAAY,CAACK,GAAD,CAAZ,CAAkBO,QAJf;UAKhBC,UAAU,EAAEb,YAAY,CAACK,GAAD,CAAZ,CAAkBQ,UALd;UAMhBC,WAAW,EAAEd,YAAY,CAACK,GAAD,CAAZ,CAAkBU;QANf,CAAlB;MAQD;;MAEDC,QAAQ,CAACZ,YAAD,CAAR;MACAX,OAAO,CAACC,GAAR,CAAYL,MAAZ;IACO,CAzBT;;IA2BAM,SAAS,GAAGsB,KAAZ,CAAmBC,KAAK,IAAI;MACxB1B,YAAY,CAAC0B,KAAK,CAACC,OAAP,CAAZ;IACH,CAFD;EAIH,CAjCQ,EAiCN,EAjCM,CAAT;EAmCA,oBAAO,QAAC,IAAD;IAAA;IAAA;IAAA;EAAA,QAAP;AAGC;;GA1CQ/B,e;;KAAAA,e;AA0CR;AAGD,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}